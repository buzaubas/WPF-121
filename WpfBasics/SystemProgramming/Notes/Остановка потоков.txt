Управление потоками. Остановка потоков
Для задач, которые долго выполняются, может понадобиться отмена их
работы до естественного окончания.
!! разрушить основной поток (закрыть окно) не решит эту задачу, т.к.
   потоки равноправные и второй поток продолжит работу после окончания первого

Более того, второму потоку может понадобиться "убрать за собой" - освободить
ресурсы, удалить временные файлы и т.п.

Ранее (до 3 версии Core) потоки можно было останавливать методом .Abort()
С версии 5 это упразднено, синтаксической ошибки нет, но при вызове .Abort()
выбрасывается исключение (PlatformNotSupported).
Однако, традиции использование этого метода сохраняются:
 вызов .Abort() приводил к тому, что в методе потока выбрасывалось исключение
 (ThreadAborted), которое "разрушало" поток.
 При необходимости завершающих действий все тело потокового метода заключалось
 в try-catch, при появления исключения отрабатывал catch.

Недостатки: 
 - неожиданное появление исключение может нарушить "транзакцию" в работе
 - возможность вызвать .Abort() из любого метода - ухудшает безопасность

Новый подход:
 Разделяются инструменты управления остановкой и признака остановки
 CancellationTokenSource tokenSource; - источник токенов, генерирует
  токены, каждый из которых "привязан" к этому источнику. Отмена
  источника переводит все его токены в отмененное состояние.
 CancellationToken token = tokenSource.Token; - сгенерированный токен,
  он передается в потоки/задачи и может быть использован для информирования
  !! отмена источника не влияет на потоки, только устанавливает отмену 
     токенов. Потоки должны сами мониторить состояние токенов
     if(token.IsCancellationRequested) { ... Действия по отмене ... }
 Источник "одноразовый", после отмены его не нужно пытаться "открыть",
  следует создавать новый источник.

