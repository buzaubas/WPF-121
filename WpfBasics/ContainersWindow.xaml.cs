using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace WpfBasics
{
    /// <summary>
    /// Interaction logic for ContainersWindow.xaml
    /// </summary>
    public partial class ContainersWindow : Window
    {
        public ContainersWindow()
        {
            InitializeComponent();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Click");
        }

    }
}

/* Одно из главных отличий WPF - в позиционировании элементов на окне
 * Применяется идея контейнеров - элементов, которые по-разному
 * организовывают свои внутренние (дочерние) элементы.
 * В окне может быть только один элемент (обычно контейнер), а он уже
 * может содержать любое кол-во эл-тов, в т.ч. других контейнеров
 * 
 * Основные виды контейнеров
 * StackPanel - "одномерная" группировка, "стопка"
 *   Orientation="Horizontal" - |||
 *    Orientation="Vertical"  -  =
 *  "+" самый простой контейнер (в т.ч. по ресурсам)
 *  "-" обрезается если не влазит в родительский контейнер (в окно)
 *  
 *  WrapPanel - то же самое, что и StackPanel, но при переполнении 
 *  происходит перенос элементов
 *  
 *  DockPanel - контейнер с "притяжением" - элементы "притягиваются" 
 *  к одной из четырех сторон (верх-низ-лево-право), при изменении
 *  размеров притяжение движет элементы вместе с гранями. Применяется
 *  для сайто-подобных окон с выделенными "футером" - нижней частью,
 *  и правым меню
 *  Задание: используя док-панель сделать образ страницы сайта
 *  Header                       Использовать цвет фона для
 *  Left  Content  Right         наглядности границ элементов
 *  Footer             
 *  
 *  Табличные (сеточные) контейнеры
 *  <UniformGrid Rows="3" Columns="3"> - простой контейнер с
 *  ячейками одинакового размера. Каждый дочерний элемент автоматически
 *  помещается в новую ячейку.
 *  
 *  Grid - наиболее универсальный контейнер
 *  каждая ячейка собирается отдельно, дочерние элементы должны быть
 *  явно указаны к какой ячейке они относятся. Иначе все они попадают
 *  в одну ячейку и перекрывают друг друга.
 *  
 *  Задание: повторить образ сайта (как док-панель) средствами Grid
 *  
 *  Д.З. Средствами контейнеров WPF составить "расписание"
 *  
 *     Расписание занятий на неделю
 *  |---------------------------------|
 *  | День | Пара | Время | Предмет   |
 *  |------|------|-------|-----------|
 *  | Пн   | 1    | 09:00 | { WPF }   |
 *  |      | 2    | 10:30 | {     }   |
 *  |      | 3    | 12:00 |  HTML     |
 *  |------|------|-------|-----------|
 *  | Вт   | 1    | 09:00 |   WPF     |   
 *  |      | 2    | 10:30 | { HTML }  |
 *  |      | 3    | 12:00 | {      }  |
 *  |------| -----|-------|-----------|
 *  |      |      |       |           |
 *  
 *  
 *  
 */
